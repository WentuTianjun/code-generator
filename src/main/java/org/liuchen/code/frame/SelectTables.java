package org.liuchen.code.frame;

import org.liuchen.code.db.ADatabaseInfo;
import org.liuchen.code.plugin.CustomCellEditor;
import org.liuchen.code.plugin.CustomTableListModel;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;

/**
 *
 */
public class SelectTables extends JFrame {

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton jButton1;
    private JButton jButton2;
    private JButton jButton3;
    private JButton jButton5;
    private JButton jButton6;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JScrollPane jScrollPane1;
    public JTable jTable1;
    private JButton next;
    private JTextField search;
    private JButton previous;
    // End of variables declaration//GEN-END:variables

    private ADatabaseInfo databaseInfo;
    private final CustomTableListModel model;
    private final MainFrame mainFrame;

    /**
     * Creates new form ReverseFrame
     * 创建一个新的选择表的frame框
     */
    public SelectTables(final MainFrame mainFrame) {
        // 赋值mainFrame ,点击上一步的时候会设置mainFrame可见
        this.mainFrame = mainFrame;
        // 创建CustomTableListModel对象，设定显示的字段和可修改的字段
        model = new CustomTableListModel();
        // 初始化selectTables ，并为其中的按钮添加监听事件
        initComponents();
//        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        // 为jTable1设置默认的编辑器
        jTable1.setDefaultEditor(String.class, new CustomCellEditor(new JTextField()));

        jTable1.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
        Toolkit tk = Toolkit.getDefaultToolkit();
        setLocation((tk.getScreenSize().width - getSize().width) / 2,
                (tk.getScreenSize().height - getSize().height) / 2);
        setTitle("选择表");
        jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
//        this.addWindowListener(new WindowAdapter() {
//            @Override
//            public void windowClosing(WindowEvent event) {
//                dispose();
//                mainFrame.setVisible(true);
//            }
//        });
    }

    public void setDatabaseInfo(ADatabaseInfo databaseInfo) {
        this.databaseInfo = databaseInfo;
//        model.addTableList(databaseInfo.getTableList());
    }

    /**
     * This method is called from within the constructor to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        /**
         * 初始化frame中的组件
         */
        jLabel1 = new JLabel();
        jLabel2 = new JLabel();
        next = new JButton();
        jButton1 = new JButton();
        jScrollPane1 = new JScrollPane();
        jTable1 = new JTable();
        jButton2 = new JButton();
        jLabel3 = new JLabel();
        search = new JTextField();
        jButton5 = new JButton();
        jButton3 = new JButton();
        jButton6 = new JButton();
        previous = new JButton();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);

        jLabel1.setText("第二步：选择表");

        jLabel2.setText("请选择你要逆向的表：");

        next.setText("下一步");
        // 为“下一步”按钮添加监听事件
        next.addActionListener((evt) -> nextActionPerformed(evt));


        jButton1.setText("反选");
        // 为“反选”按钮添加监听事件
        jButton1.addActionListener((evt) -> jButton1ActionPerformed(evt));


        // 为jTable1设置操作模型
        jTable1.setModel(model);
        // 设置jTable1行可选
        jTable1.setRowSelectionAllowed(true);
        // 设置jTable1列可选
        jTable1.setColumnSelectionAllowed(true);
        // ？？？？
        jScrollPane1.setViewportView(jTable1);
        // ？？？？
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        jButton2.setText("全选");
        // 为“全选”按钮添加监听事件
        jButton2.addActionListener((evt) -> jButton2ActionPerformed(evt));

        jLabel3.setText("搜索:");

        jButton5.setText("确定");
        // 为“确定”按钮添加监听事件
        jButton5.addActionListener((evt) -> jButton5ActionPerformed(evt));

        jButton3.setText("重译选中");
        // 为“重译选中”按钮添加监听事件
        jButton3.addActionListener((evt) -> jButton3ActionPerformed(evt));

        jButton6.setText("完成");
        // 为“完成”按钮添加监听事件
        jButton6.addActionListener((evt) -> jButton6ActionPerformed(evt));

        previous.setText("上一步");
        // 为“上一步”按钮添加监听事件
        previous.addActionListener((evt) -> upActionPerformed(evt));


        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(25, 25, 25)
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel2)
                                                        .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 507, Short.MAX_VALUE))
                                                .addGap(8, 8, 8))
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel1)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(10, 10, 10)
                                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addComponent(jLabel3)
                                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(search)
                                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                                                .addComponent(jButton5))))))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(55, 55, 55)
                                                .addComponent(previous)
                                                .addGap(44, 44, 44)
                                                .addComponent(jButton2)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jButton1)
                                                .addGap(44, 44, 44)
                                                .addComponent(jButton3)
                                                .addGap(39, 39, 39)
                                                .addComponent(next)
                                                .addGap(34, 34, 34)
                                                .addComponent(jButton6)))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel3)
                                        .addComponent(search, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButton5))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGap(8, 8, 8)
                                .addComponent(jLabel2)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(previous)
                                        .addComponent(jButton2)
                                        .addComponent(jButton1)
                                        .addComponent(next)
                                        .addComponent(jButton3)
                                        .addComponent(jButton6))
                                .addGap(22, 22, 22))
        );

        pack();
    }

    /**
     * 反选按钮的监听事件
     *
     * @param evt
     */
    private void jButton1ActionPerformed(ActionEvent evt) {
        System.out.println("成功点击反选");
//        model.selectAll();
    }

    /**
     * 下一步按钮的监听事件
     *
     * @param evt
     */
    private void nextActionPerformed(ActionEvent evt) {
        try {
            System.out.println("成功点击下一步");
//            java.util.List<TableInfo> selectedList = model.getSelectedList();
//            if (ObjectHelper.isNotEmpty(selectedList)) {
//                java.util.List<TableBean> tableBeans = new ArrayList<TableBean>();
//                for (TableInfo map : selectedList) {
//                    TableBean tableBean = databaseInfo.getTableInfo(map);
//                    tableBeans.add(tableBean);
//                }
//                this.dispose();
//                SelectColumns selectColumns = new SelectColumns(this, tableBeans, 0);
//                selectColumns.setVisible(true);
//            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(rootPane, e.getMessage());
        }
    }

    private void buildModel() {
//        java.util.List<TableInfo> selectedList = model.getSelectedList();


//        GenerateFactory.ini();
//        for (TableInfo map : selectedList) {
//            TableBean tableBean = databaseInfo.getTableInfo(map);
//            //GenerateFactory.generate(tableBean);
//            CodeGenerateFactory.codeGenerate(tableBean);
//        }
//        GenerateFactory.generateGolable();
        JOptionPane.showMessageDialog(this, "生成完毕！");
    }

    /**
     * 全选按钮的监听事件
     *
     * @param evt
     */
    private void jButton2ActionPerformed(ActionEvent evt) {
        System.out.println("点击全选");
//        model.selectAllTable();
    }

    /**
     * 确定按钮的监听事件
     *
     * @param evt
     */
    private void jButton5ActionPerformed(ActionEvent evt) {
        try {
            System.out.println("点击确定");
//            model.addTableList(databaseInfo.getTableList(search.getText()));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e.getMessage());
        }
    }

    /**
     * 重译选中按钮的监听事件
     *
     * @param evt
     */
    private void jButton3ActionPerformed(ActionEvent evt) {
        try {
            System.out.println("点击重译选中");
//            model.reTranslate(databaseInfo.getTableList(search.getText()));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e.getMessage());
        }
    }

    /**
     * 完成按钮的监听事件
     *
     * @param evt
     */
    private void jButton6ActionPerformed(ActionEvent evt) {
        try {
            System.out.println("点击完成");
//            buildModel();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e.getMessage());
        }
    }

    /**
     * 上一步按钮的监听事件
     *
     * @param evt
     */
    private void upActionPerformed(ActionEvent evt) {
        System.out.println("点击上一步");
        this.dispose();
        mainFrame.setVisible(true);
    }


}
